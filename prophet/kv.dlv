% kv is a not eventually consistent key-value store
% with only one key (implicit). easy to generalize.
%
% Requires
% * po.dlv,
%   delivery.dlv (sent), and
%   pick_received.dlv (do_pick, some_pick, and pick_received)
%   (run with "dlv po.dlv delivery.dlv pick_received.dlv kv.dlv <other dlv files> -N=<..>")
% * node(Node)          ... all nodes store replica
% * set(Node, T, Val)   ... for client writes to the kv store.


% forward changes to other replica.
sent(N0, T0, N, kv_set, V) :- set(N0, T0, V), node(N), N != N0.

% override: local set takes priority over received.
pick_received(N, T, N, T, kv_set, V) :- set(N, T, V).
do_pick(kv_set).

% set new value
kv(N, T, V) :- pick_received(_, _, N, T, kv_set, V).

% inertia: if no change, keep value
kv(N, T, V) :- kv(N, T0, V), #succ(T0, T), not some_pick(N, T, kv_set).


% Has node aquiesced? This is for analysis purposes and conceptually not
% available to the kv-store.
kv_ready(N, T) :- pick_received(_, _, N, T, kv_set, _),
                  not kv_exists_gt_ts(N, T).
kv_exists_gt_ts(N, T) :- #int(T),
  pick_received(_, _, N, T2, kv_set, _), T < T2.




