% Paxos
% Use request(Node, T) to start Paxos.

%note: the proposer is among the acceptors
sent(Proposer, Prop_T, Acceptor, prepare, V) :- kv(Proposer, Prop_T, V),
  request(Proposer, Prop_T), node(Acceptor). %, not paxos_running(Proposer).


sent0(Acceptor, Proposer, promise, V) :- pick_received(Proposer, _, Acceptor, T, prepare, V).

% simplification. paxos only started once, protocol completely executes immediately (time stamp of start)
%paxos_running(Acceptor) :- pick_received(_, _, Acceptor, _, prepare, _).


% universal quantification: all have sent
exists_sent0(Sender, Receiver, Mesg) :- sent0(Sender, Receiver, Mesg, _).
missing_sent0(Receiver, Mesg) :- sent0(Sender, _, Mesg, _), node(Receiver),
                                 not exists_sent0(Sender, Receiver, Mesg).
all_have_sent0(Receiver, Mesg) :- exists_sent0(_, Receiver, Mesg),
                                  not missing_sent0(Receiver, Mesg).
% if at least one has sent: not vacuously true -- for rule safety.

sent0(Proposer, Acceptor, do_accept, V) :- sent0(Acceptor, Proposer, promise, V),
                                           all_have_sent0(Proposer, promise).

sent0(Acceptor, Learner, accepted, V) :- sent0(_, Acceptor, do_accept, V), node(Learner).

answer(Learner, V) :- all_have_sent0(Learner, accepted), sent0(_, Learner, accepted, V).


