% Paxos
% Use request(Node, T) to start Paxos.
% All nodes are acceptors and learners.
% The proposer is among the acceptors.



sent(Proposer, Prop_T, Acceptor, prepare, V) :- kv(Proposer, Prop_T, V),
  request(Proposer, Prop_T), node(Acceptor),
  not paxos_running(Proposer, Prop_T).



sent(Acceptor, T, Proposer, promise, V) :-
  pick_received(Proposer, _, Acceptor, T, prepare, V).

do_pick(prepare).

%paxos_running(Acceptor, T) :- pick_received(_, _, Acceptor, T, prepare, _).


sent(Proposer, T, Acceptor, do_accept, V) :-
  received(Acceptor, _, Proposer, T0, promise, V),
  received_from_all(Proposer, T, promise).

sent(Acceptor, T, Learner, accepted, V) :-
  received(_, _, Acceptor, T, do_accept, V), node(Learner).

answer(Learner, V) :- received_from_all(Learner, _, accepted),
                      received(_, _, Learner, _, accepted, V).




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% universal quantification: Receiver has received Mesg from all nodes.
exists_received(Sender,    Receiver, ByReceiverT, Mesg) :-
       received(Sender, _, Receiver,   ReceiverT, Mesg, _),
       #int(ByReceiverT), ReceiverT <= ByReceiverT.
missing_received(Receiver, ByReceiverT, Mesg) :-
  node(Receiver), #int(ByReceiverT), received(Sender, _, _, _, Mesg, _),
  not exists_received(Sender, Receiver, ByReceiverT, Mesg).
received_from_all0(   Receiver, ByReceiverT, Mesg) :-
  exists_received(_, Receiver, ByReceiverT, Mesg),
  not missing_received(Receiver, ByReceiverT, Mesg).
% if at least one has sent: not vacuously true -- for rule safety.
received_from_all(Receiver, ByReceiverT, Mesg) :-
  received_from_all0(Receiver, ByReceiverT, Mesg),
  not received_from_all_earlier(Receiver, ByReceiverT, Mesg).
received_from_all_earlier(Receiver, ByReceiverT, Mesg) :-
  received_from_all0(Receiver, T0,          Mesg),
  received_from_all0(Receiver, ByReceiverT, Mesg),
  T0 < ByReceiverT.



